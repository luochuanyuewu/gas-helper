{{.CopyRight}}

{{ range .CppIncludes }}
#include "{{.}}"
{{ end }}
#include "AbilitySystemBlueprintLibrary.h"

namespace {{.ClassName}}
{
{{ range .Attributes }}
    UE_DEFINE_GAMEPLAY_TAG({{.Name}}, TEXT("{{ $.TagPrefix }}{{.Name}}"))
{{ end }}
}

void U{{.ClassName}}::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const
{
    Super::GetLifetimeReplicatedProps(OutLifetimeProps);

    {{ range .Attributes }}
    DOREPLIFETIME_CONDITION_NOTIFY(ThisClass, {{.Name}}, COND_OwnerOnly, REPNOTIFY_Always);
    {{ end }}
}


void U{{ $.ClassName }}::PreAttributeChange(const FGameplayAttribute& Attribute, float& NewValue)
{
	// This is called whenever attributes change, so for max health/mana we want to scale the current totals to match
	Super::PreAttributeChange(Attribute, NewValue);
{{ range .Attributes }}
    {{ if ne .MaxAttributeName "" }}
    if (Attribute == Get{{ .MaxAttributeName }}Attribute())
    {
        AdjustAttributeForMaxChange({{ .Name }}, {{ .MaxAttributeName }}, NewValue, Get{{ .Name }}Attribute());
    }
    {{ end }}
{{ end }}
}

void U{{ $.ClassName }}::AdjustAttributeForMaxChange(FGameplayAttributeData& AffectedAttribute, const FGameplayAttributeData& MaxAttribute, float NewMaxValue,
                                                   const FGameplayAttribute& AffectedAttributeProperty)
{
	UAbilitySystemComponent* AbilityComp = GetOwningAbilitySystemComponent();
	const float CurrentMaxValue = MaxAttribute.GetCurrentValue();
	if (!FMath::IsNearlyEqual(CurrentMaxValue, NewMaxValue) && AbilityComp)
	{
		// Change current value to maintain the current Val / Max percent
		const float CurrentValue = AffectedAttribute.GetCurrentValue();
		float NewDelta = (CurrentMaxValue > 0.f) ? (CurrentValue * NewMaxValue / CurrentMaxValue) - CurrentValue : NewMaxValue;

		AbilityComp->ApplyModToAttributeUnsafe(AffectedAttributeProperty, EGameplayModOp::Additive, NewDelta);
	}
}

{{ range .Attributes }}

FGameplayAttribute U{{ $.ClassName }}::Bp_Get{{ .Name }}Attribute()
{
    return ThisClass::Get{{ .Name }}Attribute();
}

FGameplayTag U{{ $.ClassName }}::Bp_Get{{ .Name }}AttributeTag()
{
return {{$.ClassName}}::{{.Name}};
}

float U{{ $.ClassName }}::Get{{.Name}}AttributeFromActor(const AActor* Actor, bool& bSuccessfullyFoundAttribute)
{
    return UAbilitySystemBlueprintLibrary::GetFloatAttribute(Actor,Get{{.Name}}Attribute(),bSuccessfullyFoundAttribute);
}

void U{{ $.ClassName }}::OnRep_{{ .Name }}(const FGameplayAttributeData& OldValue) const
{
    GAMEPLAYATTRIBUTE_REPNOTIFY(ThisClass, {{ .Name }}, OldValue);
}

{{ end }}